'' =================================================================================================
''
''   File....... isp_bh1750.spin2
''   Purpose.... Object providing access to BH1750 via i2c
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2021 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Mar 2021
''   Updated.... 19 Mar 2021
''
'' =================================================================================================
CON { pins for BH1750 }

    PIN_BH1750_SCL  = 16    ' blue
    PIN_BH1750_SDA  = 17    ' yellow
    PIN_BH1750_ADDR = 18    ' dk grn

    bh1750_speed_khz = 50_000

    DVC_SLAVE_UNKNOWN = 0
    DVC_SLAVE1_ADDR = %1011100  ' 0x5c
    DVC_SLAVE0_ADDR = %0100011  ' 0x23

    #0, DVC_NOT_FOUND, DVC_SLAVE0, DVC_SLAVE1

CON { BH1750 commands }

    CMD_PWR_DOWN                = %0000_0000
    CMD_PWR_ON                  = %0000_0001
    CMD_RESET                   = %0000_0111
    CMD_MEAS_CONT_HRES_MODE1    = %0001_0000
    CMD_MEAS_CONT_HRES_MODE2    = %0001_0001
    CMD_MEAS_CONT_LRES_MODE     = %0001_0011
    CMD_MEAS_ONCE_HRES_MODE1    = %0010_0000
    CMD_MEAS_ONCE_HRES_MODE2    = %0010_0001
    CMD_MEAS_ONCE_LRES_MODE     = %0010_0011
    CMD_CHG_MEAS_TIME_HBIT      = %0100_0000
    CMD_CHG_MEAS_TIME_LBIT      = %0110_0000

    DLY_HRES_MODE1_IN_MS        = 180   ' typ 120 ms (180 ms max)
    DLY_HRES_MODE2_IN_MS        = 180   ' typ 120 ms (180 ms max)
    DLY_LRES_MODE_IN_MS         = 24    ' typ 16 ms (24 ms max)

    FLAG_ACK = 1
    FLAG_NOT_ACK = 0

    MODE_READ  = %0000_0001
    MODE_WRITE = %0000_0000

OBJ { objects used }

    i2c_bus : "jm_i2c"

VAR { device state information }

    long  slaveAddress

PUB null()

'' This is not a top-level object
PUB init()
    '' init the output pins (quiet the device)
    'pinfloat(PIN_BH1750_ADDR)   ' slave1
    'wrpin(PIN_BH1750_ADDR, P_HIGH_1MA)
    'pinh(PIN_BH1750_ADDR)   ' slave0?

    ' have the driver force its own pins quiet
    i2c_bus.quiesce(PIN_BH1750_SCL, PIN_BH1750_SDA, i2c_bus.PU_3K3)

PUB setup()

    i2c_bus.setup(PIN_BH1750_SCL, PIN_BH1750_SDA, bh1750_speed_khz, i2c_bus.PU_3K3)

PUB idDevice() : deviceFound | have0, have1

    have0 := have1 := false
    if(i2c_bus.present(DVC_SLAVE1_ADDR))
        have1 := true
    if(i2c_bus.present(DVC_SLAVE0_ADDR))
        have0 := true

    deviceFound := DVC_NOT_FOUND
    slaveAddress := DVC_SLAVE_UNKNOWN
    if(!have0 and have1)
        deviceFound := DVC_SLAVE1
        slaveAddress := DVC_SLAVE1_ADDR
    elseif(have0 and !have1)
        deviceFound := DVC_SLAVE0
        slaveAddress := DVC_SLAVE1_ADDR

PUB powerOn() : ok | ackBit

    ok := false
    i2c_bus.start()
    ackBit := i2c_bus.write((slaveAddress << 1) | MODE_WRITE)
    'if(ackbit)
    ackBit := i2c_bus.write(CMD_PWR_ON)
    if(ackbit)
        ok := true
    i2c_bus.stop()

PRI measureOnce(cmdByte): ok | ackbit

    ok := false
    i2c_bus.start()
    ackBit := i2c_bus.write((slaveAddress << 1) | MODE_WRITE)
    'if(ackbit)
    ackBit := i2c_bus.write(cmdByte)
    if(ackbit)
        ok := true
    i2c_bus.stop()


PUB readOnce() : ok, value | ackBit

    value := 0
    ok := measureOnce(CMD_MEAS_ONCE_HRES_MODE1)

    waitms(DLY_HRES_MODE1_IN_MS)    ' wait for meas complete

    i2c_bus.start()
    ackBit := i2c_bus.write((slaveAddress << 1) | MODE_READ)
    'if(ackbit)
    value.byte[1] := i2c_bus.read(FLAG_ACK)
    value.byte[0] := i2c_bus.read(FLAG_NOT_ACK)
    i2c_bus.stop()

PUB readContinuous() : ok | ackBit

    ok := false
    i2c_bus.start()
    ackBit := i2c_bus.write(slaveAddress)
    'if(ackbit)
    ackBit := i2c_bus.write(CMD_PWR_ON)
    if(ackbit)
        ok := true
    i2c_bus.stop()

CON { license }

{{
 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2020 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
